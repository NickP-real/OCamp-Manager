<script lang="ts">
	import { superForm, type Infer, type SuperValidated } from "sveltekit-superforms";
	import type { FormMode } from "./type";
	import { campStaffSchema, type CampStaffSchema } from "$lib/client/form/camp-staff-form";
	import { zodClient } from "sveltekit-superforms/adapters";
	import * as Form from "$lib/components/form-ui";
	import type { Staff } from "@db/schema/staff";
	import Table from "../table/Table.svelte";
	import { createColumnHelper } from "@tanstack/svelte-table";
	import { onMount } from "svelte";
	import { getStaffApi } from "$lib/api/staff-api";
	import { page } from "$app/stores";

	export let mode: FormMode = "create";
	export let formData: SuperValidated<Infer<CampStaffSchema>>;

	let staffs: Staff[];

	const columnHelper = createColumnHelper<Staff>();
	const columns = [
		columnHelper.accessor("firstName", { header: "First name", cell: (info) => info.getValue() }),
		columnHelper.accessor("lastName", { header: "Last name", cell: (info) => info.getValue() }),
		columnHelper.accessor("nickname", { header: "Nickname", cell: (info) => info.getValue() })
	];

	const form = superForm(formData, { validators: zodClient(campStaffSchema), dataType: "json" });
	const { enhance, form: formFieldData } = form;
	let selection = $formFieldData.staffIds.reduce(
		(prev, current) => ({ ...prev, [current]: true }),
		{}
	);

	async function fetchStaff() {
		staffs = await getStaffApi();
	}

	function onStaffSelect() {
		$formFieldData.staffIds = Object.keys(selection);
	}

	$: selection, onStaffSelect();

	onMount(() => {
		fetchStaff();
	});
</script>

<form method="post" use:enhance class="space-y-4">
	<Form.Title>
		{#if mode === "create"}
			Add staff to camp
		{:else}
			Update staff
		{/if}
	</Form.Title>

	<Table data={staffs ?? []} {columns} bind:selection idKey="id" />
	<Form.ButtonSection>
		<a href="/camps/{$page.params.id}/staffs">Cancel</a>
		<button type="submit">Confirm</button>
	</Form.ButtonSection>
	<!-- {#await staffs} -->
	<!-- 	<Form.Skeleton>Loading staffs...</Form.Skeleton> -->
	<!-- {:then staffs} -->
	<!-- {#if !staffs} -->
	<!-- 	<p>No staffs found</p> -->
	<!-- {:else} -->
	<!-- 	{@const items = staffs.map((staff) => ({ -->
	<!-- 		label: `${staff.firstName} ${staff.lastName}`, -->
	<!-- 		value: staff -->
	<!-- 	}))} -->
	<!-- 	<Form.Combobox id="" {items} on:itemselect={onStaffSelect} /> -->
	<!-- {/if} -->
	<!-- {/await} -->
</form>
